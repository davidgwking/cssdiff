#!/usr/bin/env node

var cssdog = require('../lib/cssdog');

var argv = require('yargs')
  .version(function () { return require('../package').version; })
  .usage('$0 <input glob> [options...]')
  .option('a', {
    alias: 'artifactsDirectory',
    demand: false,
    default: './artifacts',
    describe: 'location where intermediary results and failures are stored.',
    type: 'string'
  })
  .option('b', {
    alias: 'baselinesDirectory',
    demand: false,
    describe: 'location where from where baselines are loaded and stored. Defaults to ./{{artifactsDirectory}}/baselines',
    type: 'string'
  })
  .option('d', {
    alias: 'dirty',
    demand: false,
    default: false,
    describe: 'do not clean up comparison artifacts and results following a run.',
    type: 'boolean'
  })
  .option('r', {
    alias: 'rebase',
    demand: false,
    default: false,
    describe: 'create a new baseline. this will delete your current baseline snapshots.',
    type: 'boolean'
  })
  .option('t', {
    alias: 'tolerance',
    demand: false,
    default: 0.01,
    describe: 'Mismatch tolerance. Increasing this value will decrease test coverage. Defaults to 0.01%.',
    type: 'number'
  })
  .option('v', {
    alias: 'verbose',
    demand: false,
    default: false,
    describe: 'whether to print log messages to stdout',
    type: 'boolean'
  })
  .option('no-colors', {
    demand: false,
    default: false,
    describe: 'disabled colorized output',
    type: 'boolean'
  })
  .help('h')
  .strict()
  .argv;

var inputGlob = argv._[0];
if (!inputGlob) {
  console.error('error: input glob pattern required');
  process.exit(1);
}

var options = {
  artifactsDirectory: argv.a,
  baselinesDirectory: argv.b,
  dirty: argv.d,
  rebase: argv.r,
  mismatchTolerance: argv.t,
  verbose: argv.v
};

cssdog(inputGlob, options, function (err, ok, code) {
  console.info('info: child process exited with code %s', code);

  if (err) {
    console.error('error: %s', err.message);
    process.exit(err.code ? err.code : 1);
  }

  if (!ok) process.exit(1);

  process.exit(0);
});
